/**
 * 배열 구조 분해, 배열 비구조화할당 
 *  - 배열의 데이터를 접근할때 효율적으로 처리하는 전략
 */
// 기존방식
// 기본 데이터
let arr = [ 1, 2, [3, 4], 5];
// 실습 1분, 배열에서 값추출 => 배열명[ 인덱스 ]
// 제시된 데이터 arr에서 값 2를 출력하시오
console.log( arr[1] );
// 제시된 데이터 arr에서 값 4를 출력하시오
console.log( arr[2][1] ); // 배열명[ 1차원의인덱스 ][ 2차원의인덱스 ]...

// 개선안
// 필요한것만 추출!!, 단 순서대로 추출된다!
// 변수키워드 [ 변수명,.... ] = 배열;
// 변수명은 개발자 마음대로 구성(의미있게)
let [ a, b, c, d ] = arr;
console.log( 'b', b ); // 배열의 맴버를 특정 변수명을 가진 변수로 획득가능
// 특정 값을 받기 위해서 불필요한 변수도 생성해야 한다!! 단점

// 추가 개선, 처음부터 필요한 부분까지만 분해
let [ a1, b1 ] = arr;
console.log( 'b1', b1 );

// 추가 개선, 나머지 부분을 통으로 받아서 특정변수로 관리
// 스프레드 연산의 기능중 1개 : 배열 분해시 나머지를 받아서 처리가능
let [ a2, b2, ...rest ] = arr;
console.log( a2, b2, rest );

// [ 1, 2, [3, 4], 5]
// arr의 배열 데이터중 4만 추출한다면? => 구조를 동일하게 구성하여 분해
let [x, y, [z1, z2] ] = arr;
console.log( z1, z2 );
// 분해해서 받은 변수값을 바꾼다면? 원본이 변경되는가?
// 얕은 카피(원본에 영향을 미침), 깊은 카피 문제(서로 영향 없음)
z1 = 100;
console.log( z1, arr );

// 결론, 분해(분해되어 카피된)된 데이터는 원본과 별개로 관리된다!!